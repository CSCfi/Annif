swagger: '2.0'
info:
  title: Annif REST API
  version: v1
schemes:
  - http
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
parameters:
  project_id:
    name: project_id
    in: path
    description: project identifier
    required: true
    type: string
    x-example: dummy-fi
paths:
  /projects:
    get:
      summary: get a list of projects
      operationId: annif.rest.list_projects
      produces:
        - application/json
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/ProjectList'
      tags:
        - Project administration
  '/projects/{project_id}':
    get:
      summary: show project information
      operationId: annif.rest.show_project
      parameters:
        - $ref: '#/parameters/project_id'
      responses:
        '200':
          description: succesful operation
          schema:
            $ref: '#/definitions/Project'
        '404':
          description: project not found
      tags:
        - Project administration
  '/projects/{project_id}/analyze':
    post:
      summary: suggest subjects for a given text
      operationId: annif.rest.analyze
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/project_id'
        - name: text
          in: formData
          description: text to analyze
          required: true
          type: string
        - name: limit
          in: formData
          description: maximum number of results to return
          required: false
          type: integer
          default: 10
        - name: threshold
          in: formData
          description: 'minimum score threshold, below which results will not be returned'
          required: false
          type: number
          default: 0
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/AnalysisResultList'
      tags:
        - Automatic subject indexing
definitions:
  ProjectBackend:
    description: A backend of a project
    properties:
      backend_id:
        type: string
        example: my-backend
      weight:
        type: number
        example: 1.0
    required:
      - backend_id
      - weight
  Project:
    description: A project definition
    properties:
      project_id:
        type: string
        example: my-project
      name:
        type: string
        example: My Project
      language:
        type: string
        example: en
      backends:
        type: array
        items:
          $ref: '#/definitions/ProjectBackend'
    required:
      - project_id
      - name
      - language
      - backends
  ProjectList:
    description: A list of projects
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
  AnalysisResult:
    description: A single candidate subject for a document
    properties:
      uri:
        type: string
        example: 'http://example.org/subject1'
      label:
        type: string
        example: 'Archaeology'
      score:
        type: number
        example: 0.85
    required:
      - uri
      - label
      - score
  AnalysisResultList:
    description: A list of analysis results
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/AnalysisResult'
